/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssignmentAddDTO,
  AssignmentDTOListRequestResponse,
  AssignmentDTOPagedResponseRequestResponse,
  AssignmentDTORequestResponse,
  AssignmentUpdateDTO,
  RequestResponse,
} from '../models';
import {
    AssignmentAddDTOFromJSON,
    AssignmentAddDTOToJSON,
    AssignmentDTOListRequestResponseFromJSON,
    AssignmentDTOListRequestResponseToJSON,
    AssignmentDTOPagedResponseRequestResponseFromJSON,
    AssignmentDTOPagedResponseRequestResponseToJSON,
    AssignmentDTORequestResponseFromJSON,
    AssignmentDTORequestResponseToJSON,
    AssignmentUpdateDTOFromJSON,
    AssignmentUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiAssignmentAddPostRequest {
    assignmentAddDTO?: AssignmentAddDTO;
}

export interface ApiAssignmentDeleteIdDeleteRequest {
    id: string;
}

export interface ApiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGetRequest {
    subjectId: string;
}

export interface ApiAssignmentGetByIdIdGetRequest {
    id: string;
}

export interface ApiAssignmentGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiAssignmentUpdatePutRequest {
    assignmentUpdateDTO?: AssignmentUpdateDTO;
}

/**
 * 
 */
export class AssignmentApi extends runtime.BaseAPI {

    /**
     */
    async apiAssignmentAddPostRaw(requestParameters: ApiAssignmentAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Assignment/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentAddDTOToJSON(requestParameters.assignmentAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAssignmentAddPost(requestParameters: ApiAssignmentAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAssignmentAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAssignmentDeleteIdDeleteRaw(requestParameters: ApiAssignmentDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAssignmentDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Assignment/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAssignmentDeleteIdDelete(requestParameters: ApiAssignmentDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAssignmentDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGetRaw(requestParameters: ApiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignmentDTOListRequestResponse>> {
        if (requestParameters.subjectId === null || requestParameters.subjectId === undefined) {
            throw new runtime.RequiredError('subjectId','Required parameter requestParameters.subjectId was null or undefined when calling apiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Assignment/GetAssignmentsBySubject/subject/{subjectId}`.replace(`{${"subjectId"}}`, encodeURIComponent(String(requestParameters.subjectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentDTOListRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGet(requestParameters: ApiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignmentDTOListRequestResponse> {
        const response = await this.apiAssignmentGetAssignmentsBySubjectSubjectSubjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAssignmentGetByIdIdGetRaw(requestParameters: ApiAssignmentGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignmentDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAssignmentGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Assignment/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAssignmentGetByIdIdGet(requestParameters: ApiAssignmentGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignmentDTORequestResponse> {
        const response = await this.apiAssignmentGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAssignmentGetPageGetRaw(requestParameters: ApiAssignmentGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssignmentDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Assignment/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssignmentDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAssignmentGetPageGet(requestParameters: ApiAssignmentGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssignmentDTOPagedResponseRequestResponse> {
        const response = await this.apiAssignmentGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAssignmentUpdatePutRaw(requestParameters: ApiAssignmentUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Assignment/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssignmentUpdateDTOToJSON(requestParameters.assignmentUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAssignmentUpdatePut(requestParameters: ApiAssignmentUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiAssignmentUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
