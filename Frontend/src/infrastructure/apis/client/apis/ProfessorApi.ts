/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProfessorAddDTO,
  ProfessorDTOPagedResponseRequestResponse,
  ProfessorDTORequestResponse,
  ProfessorUpdateDTO,
  RequestResponse,
} from '../models';
import {
    ProfessorAddDTOFromJSON,
    ProfessorAddDTOToJSON,
    ProfessorDTOPagedResponseRequestResponseFromJSON,
    ProfessorDTOPagedResponseRequestResponseToJSON,
    ProfessorDTORequestResponseFromJSON,
    ProfessorDTORequestResponseToJSON,
    ProfessorUpdateDTOFromJSON,
    ProfessorUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiProfessorAddPostRequest {
    professorAddDTO?: ProfessorAddDTO;
}

export interface ApiProfessorDeleteIdDeleteRequest {
    id: string;
}

export interface ApiProfessorGetByIdIdGetRequest {
    id: string;
}

export interface ApiProfessorGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiProfessorUpdatePutRequest {
    professorUpdateDTO?: ProfessorUpdateDTO;
}

/**
 * 
 */
export class ProfessorApi extends runtime.BaseAPI {

    /**
     */
    async apiProfessorAddPostRaw(requestParameters: ApiProfessorAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Professor/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfessorAddDTOToJSON(requestParameters.professorAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProfessorAddPost(requestParameters: ApiProfessorAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProfessorAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProfessorDeleteIdDeleteRaw(requestParameters: ApiProfessorDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiProfessorDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Professor/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProfessorDeleteIdDelete(requestParameters: ApiProfessorDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProfessorDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProfessorGetByIdIdGetRaw(requestParameters: ApiProfessorGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfessorDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiProfessorGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Professor/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfessorDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProfessorGetByIdIdGet(requestParameters: ApiProfessorGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfessorDTORequestResponse> {
        const response = await this.apiProfessorGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProfessorGetPageGetRaw(requestParameters: ApiProfessorGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfessorDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Professor/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfessorDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProfessorGetPageGet(requestParameters: ApiProfessorGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfessorDTOPagedResponseRequestResponse> {
        const response = await this.apiProfessorGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProfessorUpdatePutRaw(requestParameters: ApiProfessorUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Professor/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfessorUpdateDTOToJSON(requestParameters.professorUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProfessorUpdatePut(requestParameters: ApiProfessorUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiProfessorUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
