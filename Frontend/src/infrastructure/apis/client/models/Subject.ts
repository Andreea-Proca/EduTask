/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Assignment } from './Assignment';
import {
    AssignmentFromJSON,
    AssignmentFromJSONTyped,
    AssignmentToJSON,
} from './Assignment';
import type { Feedback } from './Feedback';
import {
    FeedbackFromJSON,
    FeedbackFromJSONTyped,
    FeedbackToJSON,
} from './Feedback';
import type { Professor } from './Professor';
import {
    ProfessorFromJSON,
    ProfessorFromJSONTyped,
    ProfessorToJSON,
} from './Professor';
import type { Student } from './Student';
import {
    StudentFromJSON,
    StudentFromJSONTyped,
    StudentToJSON,
} from './Student';
import type { StudentSubject } from './StudentSubject';
import {
    StudentSubjectFromJSON,
    StudentSubjectFromJSONTyped,
    StudentSubjectToJSON,
} from './StudentSubject';

/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof Subject
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Subject
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    description?: string | null;
    /**
     * 
     * @type {Array<Assignment>}
     * @memberof Subject
     */
    assignments?: Array<Assignment> | null;
    /**
     * 
     * @type {Array<Feedback>}
     * @memberof Subject
     */
    feedbacks?: Array<Feedback> | null;
    /**
     * 
     * @type {Professor}
     * @memberof Subject
     */
    professor?: Professor;
    /**
     * 
     * @type {string}
     * @memberof Subject
     */
    professorId?: string;
    /**
     * 
     * @type {Array<Student>}
     * @memberof Subject
     */
    students?: Array<Student> | null;
    /**
     * 
     * @type {Array<StudentSubject>}
     * @memberof Subject
     */
    studentSubjects?: Array<StudentSubject> | null;
}

/**
 * Check if a given object implements the Subject interface.
 */
export function instanceOfSubject(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SubjectFromJSON(json: any): Subject {
    return SubjectFromJSONTyped(json, false);
}

export function SubjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'updatedAt': !exists(json, 'updatedAt') ? undefined : (new Date(json['updatedAt'])),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'assignments': !exists(json, 'assignments') ? undefined : (json['assignments'] === null ? null : (json['assignments'] as Array<any>).map(AssignmentFromJSON)),
        'feedbacks': !exists(json, 'feedbacks') ? undefined : (json['feedbacks'] === null ? null : (json['feedbacks'] as Array<any>).map(FeedbackFromJSON)),
        'professor': !exists(json, 'professor') ? undefined : ProfessorFromJSON(json['professor']),
        'professorId': !exists(json, 'professorId') ? undefined : json['professorId'],
        'students': !exists(json, 'students') ? undefined : (json['students'] === null ? null : (json['students'] as Array<any>).map(StudentFromJSON)),
        'studentSubjects': !exists(json, 'studentSubjects') ? undefined : (json['studentSubjects'] === null ? null : (json['studentSubjects'] as Array<any>).map(StudentSubjectFromJSON)),
    };
}

export function SubjectToJSON(value?: Subject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updatedAt': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'name': value.name,
        'description': value.description,
        'assignments': value.assignments === undefined ? undefined : (value.assignments === null ? null : (value.assignments as Array<any>).map(AssignmentToJSON)),
        'feedbacks': value.feedbacks === undefined ? undefined : (value.feedbacks === null ? null : (value.feedbacks as Array<any>).map(FeedbackToJSON)),
        'professor': ProfessorToJSON(value.professor),
        'professorId': value.professorId,
        'students': value.students === undefined ? undefined : (value.students === null ? null : (value.students as Array<any>).map(StudentToJSON)),
        'studentSubjects': value.studentSubjects === undefined ? undefined : (value.studentSubjects === null ? null : (value.studentSubjects as Array<any>).map(StudentSubjectToJSON)),
    };
}

